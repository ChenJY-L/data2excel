# .github/workflows/build-python-app.yml

name: Build Python Executable

# 触发条件：
# 1. 当有代码推送到 main 分支时
# 2. 允许在 Actions 页面手动触发此工作流
on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    # 指定运行环境为 Windows 最新版
    runs-on: windows-latest

    # 在此处定义环境变量，方便统一修改
    env:
      PYTHON_VERSION: '3.11' # 指定使用的 Python 版本
      MAIN_SCRIPT_PATH: 'data2excel.py' # 您的主程序入口文件（相对路径）
      ICON_PATH: 'favicon01.ico' # 您的图标文件（相对路径）
      OUTPUT_DIR: 'build' # Nuitka 输出目录名
      EXE_NAME: 'data2excel' # 您希望最终生成的 EXE 文件名

    steps:
      # 第一步：检出您的代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 第二步：设置 Python 环境
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # 第三步：安装项目依赖
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        shell: cmd

      # 第四步：使用 Nuitka 进行编译
      - name: Build with Nuitka (Compressed Single File)
        run: |
          python -m nuitka --onefile ^
            --windows-disable-console ^
            --enable-plugin=pyqt6 ^
            --lto=yes ^
            --output-dir=${{ env.OUTPUT_DIR }} ^
            --output-filename=${{ env.EXE_NAME }} ^
            --main=${{ env.MAIN_SCRIPT_PATH }} ^
            --windows-icon-from-ico=${{ env.ICON_PATH }}
        shell: cmd

      # 第五步：(关于 Enigma Virtual Box)
      # 自动化 Enigma Virtual Box (EVB) 比较复杂，通常需要将 EVB 的工程文件 (.evb)
      # 也提交到仓库中，并通过命令行调用它。
      # 目前，此工作流只会完成 Nuitka 的编译步骤，输出一个包含 EXE 和其依赖的文件夹。
      # 您可以在本地下载这个文件夹，然后手动使用 EVB 进行最后的封包。
      - name: Note about Enigma Virtual Box
        run: echo "Nuitka build finished. The output is in the ${{ env.OUTPUT_DIR }} directory. Manual EVB packing may be required."

      # 第六步：将 Nuitka 生成的文件夹打包成 .zip 文件，方便上传
      - name: Archive Nuitka output
        run: |
          Compress-Archive -Path "${{ env.OUTPUT_DIR }}\${{ env.EXE_NAME }}.dist\*" -DestinationPath "${{ env.EXE_NAME }}_windows.zip"
        shell: pwsh

      # 第七步：上传构建产物
      # 这会将 zip 文件上传到 GitHub Actions 的运行记录中，您可以从中下载
      - name: Upload artifact for testing
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.EXE_NAME }}-${{ github.run_number }}
          path: ${{ env.EXE_NAME }}_windows.zip

      # 修改此步骤以更新固定的 Release
      - name: Create or Update Release
        uses: softprops/action-gh-release@v1
        with:
          # 使用一个固定的标签名
          tag_name: "latest"
          name: "Latest Build (from main branch)"
          body: "This is the latest automated build. Updated at ${{ env.TIMESTAMP }} UTC."
          # 允许覆盖上一次的 Release
          prerelease: true
          # 上传打包好的 zip 文件
          files: ${{ env.EXE_NAME }}_windows.zip
